function logic [7:0] mul2;
  input [7:0] mul2_in;
  begin
    mul2[7:0] = (mul2_in[7] == 1'b1)? ({mul2_in[6:0], 1'b0} ^ 8'b0001_1011) : {mul2_in[6:0], 1'b0};
  end
endfunction

function logic [7:0] mul3;
  input [7:0] mul3_in;
  begin
    mul3[7:0] = mul2(mul3_in[7:0]) ^ mul3_in[7:0];
  end
endfunction

function logic [31:0] mixcol;
  input [31:0] mixcol_in;
  begin
    mixcol[31:24] = mul2(mixcol_in[31:24]) ^ mul3(mixcol_in[23:16]) ^ mixcol_in[15:8] ^ mixcol_in[7:0];
    mixcol[23:16] = mixcol_in[31:24] ^ mul2(mixcol_in[23:16]) ^ mul3(mixcol_in[15:8]) ^ mixcol_in[7:0];
    mixcol[15:8] = mixcol_in[31:24] ^ mixcol_in[23:16] ^ mul2(mixcol_in[15:8]) ^ mul3(mixcol_in[7:0]);
    mixcol[7:0] = mul3(mixcol_in[31:24]) ^ mixcol_in[23:16] ^ mixcol_in[15:8] ^ mul2(mixcol_in[7:0]);
  end
endfunction

module MixColumn (
  input [31:0] mixcol_in,
  output [31:0] mixcol_out
);
  
  assign mixcol_out = mixcol(mixcol_in);

endmodule
